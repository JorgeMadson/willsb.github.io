<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>William Barbosa</title>
        <description>William Barbosa - William Barbosa</description>
        <link>http://willsb.github.io</link>
        <atom:link href="http://willsb.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Wed, 17 Feb 2016 20:00:50 -0200</lastBuildDate>
        <pubDate>Wed, 17 Feb 2016 20:00:50 -0200</pubDate>
        <ttl>60</ttl>


        <item>
                <title>await willsb.PreparePCLAsync();</title>
                <description>
&lt;h3 id=&quot;episdio-i---preparando-uma-pcl-para-xamarin&quot;&gt;Episódio I - Preparando uma PCL para Xamarin&lt;/h3&gt;

&lt;p&gt;Este é um material de apoio que eu publicarei em paralelo à série &lt;a href=&quot;http://willsb.github.io/xamarin/2016/02/11/episode-I&quot;&gt;MVV O que?&lt;/a&gt;. Serão dois posts, onde eu irei ensinar como deixar a sua PCL pronta (além de instruir o que é uma PCL),  e explanar acerca da necessidade de trabalhar com assincronia quando se trata de desenvolvimento Cross-Mobile com Xamarin. Sendo essa uma série assíncrona, as postagens de &lt;a href=&quot;https://github.com/MvvmCross/MvvmCross&quot;&gt;MvvmCross&lt;/a&gt; seguem naturalmente em paralelo :)&lt;/p&gt;

&lt;h3 id=&quot;pcl&quot;&gt;PCL?&lt;/h3&gt;

&lt;p&gt;Portable Class Libraries (PCLs) são tipos específicos de Class Library que podem ser consumidos em multiplos tipos de projeto. Dependendo de como ela é criada, a mesma PCL pode ser utilizada no seu projeto ASP.Net, Windows Phone e até mesmo Android e iOS usando Xamarin. A um conjunto de plataformas, da-se o nom de profile. Mais informação sobre profiles pode ser encontrada &lt;a href=&quot;http://embed.plnkr.co/03ck2dCtnJogBKHJ9EjY/&quot;&gt;aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando você cria uma PCL, você escolhe quais plataformas ela vai utilizar. Isso determina quais bibliotecas do .net você poderá usar dentro da sua Class Library, sempre limitando por baixo. Por exemplo: Nenhuma das plataformas móveis tem acesso ao &lt;code class=&quot;highlighter-rouge&quot;&gt;System.IO&lt;/code&gt;. Você pode usar &lt;code class=&quot;highlighter-rouge&quot;&gt;System.IO&lt;/code&gt; em uma PCL que tem como alvo .Net 4.5 e Windows 8, mas ao adicionar Xamarin.Android ou Windows Phone (plataformas que não podem acessar &lt;code class=&quot;highlighter-rouge&quot;&gt;System.IO&lt;/code&gt;), você não pode mais referenciar esse namespace na sua PCL.&lt;/p&gt;

&lt;p&gt;Como a palavra chave do Xamarin é reuso de código, é crucial tentar manter a maior quantidade possível de código dentro de uma PCL que pode ser usada por todas as suas plataformas. Claro que nem todo código pode ser compartilhado (discutiremos isso mais a fundo na série “MVV O que?”), mas quanto mais código estiver na sua PCL, menos tempo você perderá corrigindo bugs através dos dispositivos.&lt;/p&gt;

&lt;h3 id=&quot;e-o-que-pode-ser-compartilhado&quot;&gt;E o que pode ser compartilhado?&lt;/h3&gt;

&lt;p&gt;Uma regra geral é tentar compartilhar tudo que não for referente à camada de visualização. Orquestração da navegação, chamadas de rede, salvamento e recuperação de estado, constantes e até mesmo métodos de extensão que são pertinentes a todas plataformas podem e devem ser incluídos na sua PCL.&lt;/p&gt;

&lt;p&gt;Dos exemplos acima, o que sem dúvidas é o maior facilitador é a parte de chamadas de rede. Mesmo que sua aplicação Xamarin não faça uso do padrão MVVM, deixar toda a parte de comunicação com APIs do seu app disponível em uma PCL é algo fundamental. Digo isso porque as chamadas à rede seguem um padrão que independe da plataforma: Você faz uma requisição, o servidor serve uma resposta e você faz algo com esse resultado.&lt;/p&gt;

&lt;p&gt;Ao fazer toda a parte de rede em uma PCL, você consegue colocar todo o tratamento de erros e transformação dos dados em um único lugar. Alteração na API? Bug no client? Comportamento deve ser alterado? Tudo se resolve em todas as suas aplicações ao mudar uma unica chamada. Legal, né?&lt;/p&gt;

&lt;h3 id=&quot;e-como-faz-para-brincar-disso&quot;&gt;E como faz para brincar disso?&lt;/h3&gt;

&lt;p&gt;Criar um projeto de PCL é simples. No VS15, sigo o caminho File &amp;gt; New Project &amp;gt; Visual C# &amp;gt; Windows &amp;gt; Class Library (Portable). Após selecionar o local de criação, você verá uma lista com as plataformas possíveis. Escolha as que você pretende usar e clique em ok.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pcl-sample.png&quot; alt=&quot;Exemplo de criação de PCL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Algo que costuma causar um certo pânico é o fato de que alguns targets de PCL não tem acesso ao namespace &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Net.Http&lt;/code&gt; e nem tem suporte a operações assíncronas (a tabela de quais são esses targets pode ser encontrada &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/gg597391(v=vs.110).aspx#Anchor_4&quot;&gt;aqui&lt;/a&gt;). Para resolver esse problema, você deve instalar alguns pacotes NuGet que irão permitir o uso dessas libs. Os pacotes são o &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Bcl.Async/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft.Bcl.Async&lt;/code&gt;&lt;/a&gt; e o &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Net.Http&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft.Net.Http&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feito isso, sua PCL está pronta para se tornar o ponto de inicio do seu projeto! No próximo post desta série, Irei falar sobre a importancia de usar assíncronia e o quanto isso é facilitado ao usar Xamarin, então fiquem ligados e até a próxima!&lt;/p&gt;
</description>
                <link>http://willsb.github.io/xamarin/2016/02/17/episode-I</link>
                <guid>http://willsb.github.io/xamarin/2016/02/17/episode-I</guid>
                <pubDate>Wed, 17 Feb 2016 00:00:00 -0200</pubDate>
        </item>

        <item>
                <title>MVV O que? - MVVM aplicado à Xamarin</title>
                <description>
&lt;h3 id=&quot;episdio-i---introduo--mvvm-e-mvvmcross&quot;&gt;Episódio I - Introdução à MVVM e MVVMCross&lt;/h3&gt;

&lt;p&gt;Este é o primeiro post de uma série de chamada “MVV o que?”. Nesta série eu irei falar do padrão MVVM (Model-View-ViewModel) aplicado em ambiente Android/Windows Phone usando Xamarin. Neste primeiro post, irei falar de conceitos básicos de Xamarin e explicar um pouco do Framework que será utilizado nos exemplos, o &lt;a href=&quot;https://github.com/MvvmCross/MvvmCross&quot;&gt;MvvmCross&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A motivação para a criação deste conteúdo é a carência de fontes sobre esse tema em português e a falta de pontos de início para os estudos de Xamarin como um todo. Acompanhando a comunidade Xamarin (no StackOverflow e no grupo &lt;a href=&quot;https://www.facebook.com/groups/MonkeyNightsDevs/&quot;&gt;Monkey Nights Devs&lt;/a&gt;, entre outros lugares) percebe-se que muitos desenvolvedores vêm de um background Android ou simplesmente desconhecem o padrão MVVM, que é amplamente difundido no .Net.&lt;/p&gt;

&lt;p&gt;Minha abordagem tentará ser menos formal do que minhas resposta no StackOverflow, porém sem jamais perder detalhes importantes ao entendimento. Afinal, se o objetivo fosse parafrasear a definição de MVVM da Wikipedia, não tem motivo para estar aqui. Now let’s get down to business!&lt;/p&gt;

&lt;h3 id=&quot;o-que--mvvm-mesmo&quot;&gt;O que é MVVM mesmo?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer - Esses são conceitos teóricos básicos com o objetivo de conceituar quem nunca ouviu falar de MVVM. Se você já tem familiaridade com esse padrão, pode pular essa parte inteira sem perder nada.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Model-View-ViewModel (MVVM) é um padrão criado por engenheiros da Microsoft com o objetivo de facilitar o desacoplamento das responsabilidades de UI e lógica de negócios durante o processo de desenvolvimento de Software. Programas escritos usando esse padrão são idealmente testáveis e de fácil manutenção. Para mais informação histórica sobre MVVM (que não é o objetivo desse post), você pode consultar &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/hh848246.aspx&quot;&gt;esta página&lt;/a&gt;, da própria Microsoft&lt;/p&gt;

&lt;p&gt;A maneira como o padrão funciona pode ser explicada de forma relativamente simples. Os models são a representação dos seus dados na base. ViewModels (VM) são abstrações que tem como intuito expor apenas o que é necessário para que as Views, que são a camada de apresentação, exibam os dados na tela com facilidade. Sendo assim, os dados (models) são moldados para gerar ViewModels que são usadas pelas Views para exibir os dados na tela. Por mais simples que pareça, essa separação fornece grandes benefícios.&lt;/p&gt;

&lt;p&gt;Um deles é a facilidade de testar. ViewModels são classes independentes da interação do usuário. Isso quer dizer que escrever testes de unidade para elas é simples (e bastante aconselhável). Isso nos leva a um outro ponto crucial para o MVVM casar com o Xamarin: as ViewModels são independentes das Views. Idealmente, ViewModels nem sabem que uma View existe, portanto a mesma ViewModel pode ser usada por mais de uma interface!&lt;/p&gt;

&lt;p&gt;“Legal, uma VM serve para muitas Views. E dai?”, você se pergunta. A resposta é: Essa é exatamente a proposta do Xamarin! Reuso do mesmo código para gerar apps em muitas plataformas. Ou seja, uma ViewModel escrita em C# pode reger as Views que vão ser usadas no seu app Android, iOS e Windows Phone! Wow!&lt;/p&gt;

&lt;h3 id=&quot;e-como-isso-tudo-funciona-com-xamarin&quot;&gt;E como isso tudo funciona com Xamarin?&lt;/h3&gt;

&lt;p&gt;É importante lembrar que MVVM é apenas um padrão. Precisamos de um framework que implemente este padrão para coloca-lo em prática. Existem inúmeros frameworks de MVVM disponíveis. O que usaremos durante essa série é o MvvmCross, que é um framework bastante completo e que funciona muito bem com Xamarin. Os conceitos de MVVM que você aprenderá, contudo, são aplicáveis a qualquer outro framework.&lt;/p&gt;

&lt;p&gt;Quando se usa MvvmCross, você precisará de um projeto Core, que é onde ficará toda a lógica compartilhada entre as plataformas que você usará (ou seja, ViewModels e Models) e um projeto específico para cada plataforma que você irá utilizar. Sendo assim, uma estrutura que vai funcionar em Windows Phone, iOS e Android terá, no mínimo, 4 projetos.&lt;/p&gt;

&lt;p&gt;Usar o MVVMCross na prática é super simples. Basta instalar o pacote &lt;a href=&quot;https://www.nuget.org/packages/MvvmCross.StarterPack/&quot;&gt;MvvmCross.StarterPack&lt;/a&gt; em cada um dos seus projetos e ele criará uma estrutura mínima para começar o seu projeto. O assunto do próximo post será justamente esse: Entendendo a estrutura de um app MvvmCross.&lt;/p&gt;

&lt;h3 id=&quot;tem-que-pagar-alguma-coisa&quot;&gt;Tem que pagar alguma coisa?&lt;/h3&gt;

&lt;p&gt;O MvvmCross é 100% gratuito e de código aberto. Você pode olhar o código, modifica-lo e usar o quanto quiser, sem pagar nada. O Xamarin, contudo, não é. Se quiser usar seu código para fazer aplicativos para Android ou iOS, você terá que pagar a licença do Xamarin. Sobre o funcionamento das licenças, &lt;a href=&quot;http://xamarinbr.azurewebsites.net/entendendo-as-licencas-do-xamarin/&quot;&gt;este post&lt;/a&gt;, do Angelo Belchior, explica muito bem o funcionamento e os valores de cada modalidade.&lt;/p&gt;

&lt;p&gt;Mesmo sem ter acesso à uma conta Xamarin paga, você pode iniciar um período de 30 dias de trial para praticar com apps Android/iOS e os exemplos usados aqui irão sempre cobrir UWP (Universal Windows Platform) para que todos possam aprender :)&lt;/p&gt;
</description>
                <link>http://willsb.github.io/xamarin/2016/02/11/episode-I</link>
                <guid>http://willsb.github.io/xamarin/2016/02/11/episode-I</guid>
                <pubDate>Thu, 11 Feb 2016 00:00:00 -0200</pubDate>
        </item>


</channel>
</rss>
